Сервер для регистрации устройств
================================

Мотивация
---------

Мы уже наладили коммуникацию между устройствами, используя MQTT. Но внимательный читатель, мог
заметить, что нам пришлось вручную прописывать MQTT-темы на каждом из устройств и заново загружать 
программу на каждое из них. Когда все устройства лежат у нас на столе это не проблема, но 
представьте себе эту ситуацию со стороны пользователя, которые может купить датчик в понедельник, 
а актуатор в воскресенье (или купит актуатор через год на замену сломанному) - естественно мы не 
можем полагаться на то, что они по случайному совпадению будут знать какие данные слушать. 
Нам нужен **способ доставить настройки в устройство** не меня его основной код. Способов может быть
несколько мы можем поставлять с нашим устройством клиентское приложение, которое свяжеться с 
устройством по USB или WiFi и поможет настроить его. Другим способом (который может работать в 
связке с клиентским приложением) может быть сервер к которому подключаться устройства и получат 
всю нужную информацию с него. Именно это мы и будем сегодня делать, так как это основа, на которой
можно построить разные сценарии. 

Выбор инструментов
------------------

Существует несколько инструментов создать REST-API сервер, мы будем использовать FastAPI так как он
очень хорошо документирован и имеет руководство пользователей (https://fastapi.tiangolo.com/tutorial/)
от авторов. Это важно, так как мы не  сможем покрыть все аспекты в этом уроке, но Вы всегда сможете 
обратить к документации и руководству для дальнейше разработки.

Определяем требования
---------------------

Всегда важно определиться, чего мы хотим от нашей разработки, поэтому сформируем требования (не 
путать с техническим заданием). Требования является первым шагом к тому чтобы объяснить коллегам
по команде или генеративным моделям, что Вы от них хотите.

* Устройства IoT взаимодействуют через MQTT и используют FastAPI в качестве точки входа
* Должна быть запросы для: 
    * регистрации устройств IoT
    * извлечения тем MQTT на основе идентификатора устройства
    * извлечения конфигурации
    * задание конфигурации
    * Должна быть конечная точка для удаления и изменения устройства.
* Регистрация должна быть выполнена с идентификатором устройства IoT 
    * ID устройства вычисляется основе хэша MAC-адреса
    * местоположением устройства (широта, долгота, местоположение - название города)
    * владельцем устройства (просто название компании)
    * типом измерений устройства (температура, давление)
    * моделью датчика устройства. 
* Конфигурация включает
    * интервал отправки данных
    * качество сервиса QoS
    * время последнего изменения конфигурации
* Темы должны однозначно данные, напримерм соответствовать шаблону владелец/местоположение/тип_измерений_устройства/идентификатор_устройства. 
* После регистрации устройство должно иметь возможность получать темы на основе своего идентификатора.
* Конфигурации может быть изменена системным администратором.
* Устройство принимает новую конфигурацию после перезагрузки

Установим зависимости:

.. code-block:: bash
    pip install fastapi==0.115.8
    pip install pydantic==2.10.6
    pip install uvicorn[standard]==0.34.0



  







